#!/bin/bash

# shellcheck source=common
. "${BASH_SOURCE%/*}/common"

TEST_DIR=src/test/Rea/

generate_test_from_readme() {
  local MD_FILE=README.md
  local ML_CONTENT
  ML_CONTENT="(* DO NOT EDIT! THIS IS EXTRACTED BY A SCRIPT FROM THE README. *)

$(awk 'BEGIN {out=0}
      /^```ocaml$/ {out=1}
      /^```$/ {out=0}
      /^[^`].*/ {if (out) print $0}' < "$MD_FILE" \
  | (cd "$TEST_DIR" && opam exec -- ocamlformat --impl -))"
  local ML_FILE="$TEST_DIR/Introduction.ml"
  if ! [ -f "$ML_FILE" ] || \
      [ "$(cat "$ML_FILE")" != "$ML_CONTENT" ] ; then
    echo "$ML_CONTENT" > "$ML_FILE"
  fi
}

generate_test_from_readme

generate_build_files() {
  [ -f dune-project ] || echo '(lang dune 3.3)' > dune-project

  local TEST_FILES
  TEST_FILES=$(cd $TEST_DIR && echo *.ml)
  local TEST_DUNE
  TEST_DUNE="(tests
 (names ${TEST_FILES//.ml/})
 (libraries Rea))"

  if ! [ -f $TEST_DIR/dune ] || \
      [ "$(cat $TEST_DIR/dune)"  != "$TEST_DUNE" ] ; then
    echo "$TEST_DUNE" > src/test/Rea/dune
  fi
}

generate_build_files

build_and_test() {
  OPTS=(--root=.)

  if [ -n "$PROFILE" ]; then
     OPTS+=(--profile "$PROFILE")
  fi

  folded "Building" \
    opam exec -- dune build "${OPTS[@]}"

  folded "Testing" \
    opam exec -- dune test "${OPTS[@]}"
}

if [ "$CI" = true ]; then
  PROFILE='' build_and_test
  folded "Cleaning" \
    opam exec -- dune clean
fi

PROFILE=release build_and_test

folded "Build docs" \
  opam exec -- dune build @doc --root=.

if [ "$CI" = true ]; then
  if [[ $(git status --porcelain) ]] ; then
    git status
    git diff
    exit 1
  fi
fi
